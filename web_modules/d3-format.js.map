{"version":3,"file":"d3-format.js","sources":["../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/formatDecimal.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/exponent.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/formatSpecifier.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/formatPrefixAuto.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/formatRounded.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/formatTypes.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/identity.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/locale.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/defaultLocale.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/formatGroup.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/formatNumerals.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/formatTrim.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/precisionFixed.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/precisionPrefix.js","../node_modules/.pnpm/registry.npmjs.org/d3-format/1.4.4/node_modules/d3-format/src/precisionRound.js"],"sourcesContent":["// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nexport default function(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import formatDecimal from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","import formatDecimal from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import formatDecimal from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": function(x) { return Math.round(x).toString(10); },\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"],\n  minus: \"-\"\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n"],"names":["x","p","i","toExponential","indexOf","coefficient","slice","length","formatDecimal","Math","abs","NaN","prefixExponent","re","formatSpecifier","specifier","match","exec","Error","FormatSpecifier","fill","align","sign","symbol","zero","width","comma","precision","trim","type","undefined","d","exponent","Array","join","prototype","toString","this","max","toFixed","round","toPrecision","formatRounded","min","floor","n","toUpperCase","locale","format","formatPrefix","map","prefixes","grouping","thousands","group","identity","call","Number","value","t","j","g","push","substring","reverse","currencyPrefix","currency","currencySuffix","decimal","numerals","replace","formatNumerals","String","percent","minus","nan","newFormat","formatTypes","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","c","valuePrefix","valueSuffix","valueNegative","isNaN","s","out","i1","i0","formatTrim","charCodeAt","Infinity","padding","f","e","k","pow","defaultLocale","definition","formatLocale","step"],"mappings":"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"}