{"version":3,"file":"lit-element-notify.js","sources":["../../node_modules/.pnpm/registry.npmjs.org/@morbidick/lit-element-notify/1.1.1_lit-element@2.3.1+lit-html@1.2.1/node_modules/@morbidick/lit-element-notify/notify.js","../../node_modules/.pnpm/registry.npmjs.org/@morbidick/lit-element-notify/1.1.1_lit-element@2.3.1+lit-html@1.2.1/node_modules/@morbidick/lit-element-notify/sync.js"],"sourcesContent":["/**\n * Returns the event name for the given property.\n * @param  {string}                       name    property name\n * @param  {PropertyDeclaration} options property declaration\n * @return                                event name to fire\n */\nexport function eventNameForProperty(name, { notify, attribute } = {}) {\n    if (notify && typeof notify === 'string') {\n        return notify;\n    } else if (attribute && typeof attribute === 'string') {\n        return `${attribute}-changed`;\n    } else {\n        return `${name.toLowerCase()}-changed`;\n    }\n}\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * Enables the nofity option for properties to fire change notification events\n *\n * @template TBase\n * @param {Constructor<TBase>} baseElement\n */\nexport const LitNotify = (baseElement) => class NotifyingElement extends baseElement {\n    /**\n     * check for changed properties with notify option and fire the events\n     */\n    update(changedProps) {\n        super.update(changedProps);\n\n        for (const prop of changedProps.keys()) {\n            const declaration = this.constructor._classProperties.get(prop)\n            if (!declaration || !declaration.notify) continue;\n            const type = eventNameForProperty(prop, declaration)\n            const value = this[prop]\n            this.dispatchEvent(new CustomEvent(type, { detail: { value } }));\n        }\n    }\n};\n\nexport default LitNotify;\n","import {directive} from \"lit-html/lib/directive.js\";\nimport {eventNameForProperty} from \"./notify.js\";\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * Mixin that provides a lit-html directive to sync a property to a child property\n *\n * @template TBase\n * @param {Constructor<TBase>} baseElement\n */\nexport const LitSync = (baseElement) => class extends baseElement {\n    constructor() {\n        super();\n\n        /**\n         * lit-html directive to sync a property to a child property\n         *\n         * @param {string} property - The property name\n         * @param {string} [eventName] - Optional event name to sync on, defaults to propertyname-changed\n         */\n        this.sync = directive((property, eventName) => (part) => {\n            part.setValue(this[property]);\n\n            // mark the part so the listener is only attached once\n            if (!part.syncInitialized) {\n                part.syncInitialized = true;\n\n                const notifyingElement = part.committer.element;\n                const notifyingProperty = part.committer.name;\n                const notifyingEvent = eventName || eventNameForProperty(notifyingProperty);\n\n                notifyingElement.addEventListener(notifyingEvent, (e) => {\n                    const oldValue = this[property];\n                    this[property] = e.detail.value;\n                    if (this.__lookupSetter__(property) === undefined) {\n                        this.updated(new Map([[property, oldValue]]));\n                    }\n                });\n            }\n        });\n    }\n}\n\nexport default LitSync;\n"],"names":["eventNameForProperty","name","notify","attribute","toLowerCase","LitNotify","baseElement","update","changedProps","prop","keys","declaration","this","constructor","_classProperties","get","type","value","dispatchEvent","CustomEvent","detail","LitSync","sync","directive","property","eventName","part","setValue","syncInitialized","notifyingElement","committer","element","notifyingProperty","notifyingEvent","addEventListener","e","oldValue","undefined","__lookupSetter__","updated","Map"],"mappings":"oDAMO,SAASA,EAAqBC,GAAMC,OAAEA,EAAFC,UAAUA,GAAc,WAC3DD,GAA4B,iBAAXA,EACVA,YACAC,GAAkC,iBAAdA,EACjBA,EAEAF,EAAKG,gCAWVC,EAAaC,GAAgB,cAA+BA,EAIrEC,OAAOC,SACGD,OAAOC,OAER,MAAMC,KAAQD,EAAaE,OAAQ,OAC9BC,EAAcC,KAAKC,YAAYC,iBAAiBC,IAAIN,OACrDE,IAAgBA,EAAYT,OAAQ,eACnCc,EAAOhB,EAAqBS,EAAME,GAClCM,EAAQL,KAAKH,QACdS,cAAc,IAAIC,YAAYH,EAAM,CAAEI,OAAQ,CAAEH,MAAAA,SCzBpDI,EAAWf,GAAgB,cAAcA,EAClDO,2BASSS,KAAOC,EAAU,CAACC,EAAUC,IAAeC,OAC5CA,EAAKC,SAASf,KAAKY,KAGdE,EAAKE,gBAAiB,CACvBF,EAAKE,iBAAkB,QAEjBC,EAAmBH,EAAKI,UAAUC,QAClCC,EAAoBN,EAAKI,UAAU7B,KACnCgC,EAAiBR,GAAazB,EAAqBgC,GAEzDH,EAAiBK,iBAAiBD,EAAiBE,UACzCC,EAAWxB,KAAKY,QACjBA,GAAYW,EAAEf,OAAOH,WACcoB,IAApCzB,KAAK0B,iBAAiBd,SACjBe,QAAQ,IAAIC,IAAI,CAAC,CAAChB,EAAUY"}