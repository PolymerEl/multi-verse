{"version":3,"file":"lit-element.js","sources":["../node_modules/.pnpm/registry.npmjs.org/lit-html/1.2.1/node_modules/lit-html/lib/modify-template.js","../node_modules/.pnpm/registry.npmjs.org/lit-html/1.2.1/node_modules/lit-html/lib/shady-render.js","../node_modules/.pnpm/registry.npmjs.org/lit-element/2.3.1/node_modules/lit-element/lib/updating-element.js","../node_modules/.pnpm/registry.npmjs.org/lit-element/2.3.1/node_modules/lit-element/lib/decorators.js","../node_modules/.pnpm/registry.npmjs.org/lit-element/2.3.1/node_modules/lit-element/lib/css-tag.js","../node_modules/.pnpm/registry.npmjs.org/lit-element/2.3.1/node_modules/lit-element/lit-element.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        // Initialize to an unresolved Promise so we can make sure the element has\n        // connected before first update.\n        this._updatePromise = new Promise((res) => this._enableUpdatingResolver = res);\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a PropertyDeclaration for the property with the given options.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     *\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        const descriptor = this.getPropertyDescriptor(name, key, options);\n        if (descriptor !== undefined) {\n            Object.defineProperty(this.prototype, name, descriptor);\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     *   class MyElement extends LitElement {\n     *     static getPropertyDescriptor(name, key, options) {\n     *       const defaultDescriptor =\n     *           super.getPropertyDescriptor(name, key, options);\n     *       const setter = defaultDescriptor.set;\n     *       return {\n     *         get: defaultDescriptor.get,\n     *         set(value) {\n     *           setter.call(this, value);\n     *           // custom action.\n     *         },\n     *         configurable: true,\n     *         enumerable: true\n     *       }\n     *     }\n     *   }\n     *\n     * @nocollapse\n     */\n    static getPropertyDescriptor(name, key, _options) {\n        return {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a PropertyDeclaration via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override `createProperty`.\n     *\n     * @nocollapse\n     * @final\n     */\n    static getPropertyOptions(name) {\n        return this._classProperties && this._classProperties.get(name) ||\n            defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection.\n        this.enableUpdating();\n    }\n    enableUpdating() {\n        if (this._enableUpdatingResolver !== undefined) {\n            this._enableUpdatingResolver();\n            this._enableUpdatingResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor.getPropertyOptions(propName);\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor.getPropertyOptions(name);\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._updatePromise = this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this._updatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        const result = this.performUpdate();\n        // If `performUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this._hasRequestedUpdate;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n            else {\n                this._markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n            throw e;\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n        this._markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n *\n * @param tagName The name of the custom element to define.\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign(Object.assign({}, element), { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the internalProperty decorator.\n *\n * @example\n *\n *     class MyElement {\n *       @property({ type: Boolean })\n *       clicked = false;\n *     }\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n */\nexport function internalProperty(options) {\n    return property({ attribute: false, hasChanged: options === null || options === void 0 ? void 0 : options.hasChanged });\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n *     class MyElement {\n *       @query('#first')\n *       first;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n *\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n *     class MyElement {\n *       @queryAsync('#first')\n *       first;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n *\n *     // external usage\n *     async doSomethingWithFirst() {\n *      (await aMyElement.first).doSomething();\n *     }\n */\nexport function queryAsync(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            async get() {\n                await this.updateComplete;\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n *\n *     class MyElement {\n *       @queryAll('div')\n *       divs;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign(Object.assign({}, element), { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *       clicked = false;\n *\n *       render() {\n *         return html`\n *           <div @click=${this._onClick}`>\n *             <button></button>\n *           </div>\n *         `;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport function eventOptions(options) {\n    // Return value typed as any to prevent TypeScript from complaining that\n    // standard decorator function signature does not match TypeScript decorator\n    // signature\n    // TODO(kschaaf): unclear why it was only failing on this decorator and not\n    // the others\n    return ((protoOrDescriptor, name) => (name !== undefined) ?\n        legacyEventOptions(options, protoOrDescriptor, name) :\n        standardEventOptions(options, protoOrDescriptor));\n}\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n */\nexport function queryAssignedNodes(slotName = '', flatten = false) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                const selector = `slot${slotName ? `[name=${slotName}]` : ''}`;\n                const slot = this.renderRoot.querySelector(selector);\n                return slot && slot.assignedNodes({ flatten });\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.3.1');\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\nexport class LitElement extends UpdatingElement {\n    /**\n     * Return the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * @nocollapse\n     */\n    static getStyles() {\n        return this.styles;\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Only gather styles once per class\n        if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n            return;\n        }\n        // Take care not to call `this.getStyles()` multiple times since this\n        // generates new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.getStyles();\n        if (userStyles === undefined) {\n            this._styles = [];\n        }\n        else if (Array.isArray(userStyles)) {\n            // De-duplicate styles preserving the _last_ instance in the set.\n            // This is a performance optimization to avoid duplicated styles that can\n            // occur especially when composing via subclassing.\n            // The last item is kept to try to preserve the cascade order with the\n            // assumption that it's most important that last added styles override\n            // previous styles.\n            const addStyles = (styles, set) => styles.reduceRight((set, s) => \n            // Note: On IE set.add() does not return the set\n            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);\n            // Array.from does not work on Set in IE, otherwise return\n            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n            const set = addStyles(userStyles, new Set());\n            const styles = [];\n            set.forEach((v) => styles.unshift(v));\n            this._styles = styles;\n        }\n        else {\n            this._styles = [userStyles];\n        }\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.constructor._getUniqueStyles();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it's important to call `render`\n        // before that.\n        const templateResult = this.render();\n        super.update(changedProperties);\n        // If render is not implemented by the component, don't call lit-html render\n        if (templateResult !== renderNotImplemented) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html's NodePart - typically a TemplateResult.\n     * Setting properties inside this method will *not* trigger the element to\n     * update.\n     */\n    render() {\n        return renderNotImplemented;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the value to the element's DOM.\n * @param result The value to render.\n * @param container Node into which to render.\n * @param options Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map"],"names":["removeNodesFromTemplate","template","nodesToRemove","element","content","parts","walker","document","createTreeWalker","partIndex","nextActiveIndexInTemplateParts","part","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","nextNode","node","currentNode","previousSibling","has","push","undefined","index","forEach","n","parentNode","removeChild","countNodes","count","nodeType","startIndex","i","length","isTemplatePartActive","getTemplateCacheKey","type","scopeName","compatibleShadyCSSVersion","window","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","result","cacheKey","templateCache","templateCaches","get","stringsArray","WeakMap","keyString","Map","set","strings","key","join","marker","getTemplateElement","Template","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","createElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","Array","from","s","removeStylesFromLitTemplates","refNode","appendChild","insertCount","walkerIndex","insertBefore","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","cloneNode","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","[object Object]","value","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","Promise","res","this","_enableUpdatingResolver","_changedProperties","_reflectingProperties","initialize","finalize","attributes","_classProperties","v","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","name","options","_ensureClassProperties","noAccessor","prototype","Symbol","descriptor","getPropertyDescriptor","defineProperty","_options","oldValue","_requestUpdate","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","toLowerCase","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","enableUpdating","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","removeAttribute","setAttribute","propName","getPropertyOptions","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","e","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","update","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","customElement","tagName","classOrDescriptor","clazz","customElements","define","legacyCustomElement","kind","elements","standardCustomElement","standardProperty","assign","placement","initializer","call","property","protoOrDescriptor","proto","legacyProperty","internalProperty","query","selector","renderRoot","legacyQuery","standardQuery","queryAsync","queryAll","eventOptions","legacyEventOptions","standardEventOptions","queryAssignedNodes","slotName","flatten","slot","assignedNodes","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","Error","_styleSheet","replaceSync","unsafeCSS","css","values","reduce","acc","idx","textFromCSSResult","renderNotImplemented","LitElement","userStyles","getStyles","_styles","isArray","addStyles","reduceRight","unshift","_getUniqueStyles","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","hasUpdated","styleElement","templateResult","render","eventContext","container","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","litRender","templateFactory","delete","TemplateInstance","removeNodes"],"mappings":"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"}